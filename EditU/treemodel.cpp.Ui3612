/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** "Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*
    treemodel.cpp

    Provides a simple tree model to show how to create and use hierarchical
    models.
*/

#include "treeprop.h"
#include "treemodel.h"

#include <QStringList>
#include <QColor>


TreeModel*  TreeModel::treeModel = NULL;        // œ≈–≈ƒ”À¿“‹

TreeModel::TreeModel( QObject *parent)
    : QAbstractItemModel(parent)
{
    //QList<QVariant> rootData;
    //rootData << "T1" << "T2";
    //rootItem = new TreeProp(rootData);
    //setupModelData(data.split(QString("\n")), rootItem);
}



TreeModel::~TreeModel()
{
    delete rootItem;
}

int TreeModel::columnCount(const QModelIndex &parent) const
{

    if (parent.isValid())
        return static_cast<TreeProp*>(parent.internalPointer())->columnCount();
    else
        return rootItem->columnCount();

    //return 2;

}

bool TreeModel::setData(const QModelIndex &index, const QVariant &value, int role)
{
    if(!index.isValid())
                return 0;

        switch (role) {
        case Qt::EditRole:
            if(index.column() != 0 ){

                TreeProp *item = static_cast<TreeProp*>(index.internalPointer());
                item->setData(index.column(), value);
                //PObjectProperty pProp = _Object->ObjectPropertys.at(index.row());
                //pProp.value = value;
                //_Object->ObjectPropertys.replace(index.row(), pProp );
                //qDebug()<< value.toString();
                return 1;//_ListObjectPropertys->at(index.row()).value;

            }
            break;
        default:
            //QVariant();
            break;
        }


}

void TreeModel::setRootItem(TreeProp *pRootItem)
{
    rootItem = pRootItem;
}

QVariant TreeModel::data(const QModelIndex &index, int role) const
{
    if (!index.isValid())
        return QVariant();

    //if (role != Qt::DisplayRole && role != Qt::EditRole)
    //    return QVariant();

    switch (role) {
    case Qt::DisplayRole:
    case Qt::EditRole:{
                    TreeProp *item = static_cast<TreeProp*>(index.internalPointer());
                    return item->data(index.column());
        }
        break;
    //case Qt::BackgroundRole:        // ˆ‚ÂÚ ÙÓÌ‡ ˇ˜ÂÈÍË
    //case Qt::ForegroundRole:
                //if (index.column() == 1)
                {
                //return QVariant(QColor( 200  + 30* ( index.row() % 2 ) ,  100  + 50 * ( index.row() % 2 )   , 23));
                }
    default:
        return QVariant();
        break;
    }



   // TreeProp *item = static_cast<TreeProp*>(index.internalPointer());

  //  return item->data(index.column());
}

Qt::ItemFlags TreeModel::flags(const QModelIndex &index) const
{
    if (!index.isValid())
        return 0;
    return Qt::ItemIsEnabled | Qt::ItemIsSelectable | Qt::ItemIsEditable;
    //return QAbstractItemModel::flags(index);
}

QVariant TreeModel::headerData(int section, Qt::Orientation orientation,
                               int role) const
{
    if (orientation == Qt::Horizontal && role == Qt::DisplayRole)
        return rootItem->data(section);

    return QVariant();
}

QModelIndex TreeModel::index(int row, int column, const QModelIndex &parent)
            const
{
    if (!hasIndex(row, column, parent))
        return QModelIndex();

    TreeProp *parentItem;

    if (!parent.isValid())
        parentItem = rootItem;
    else
        parentItem = static_cast<TreeProp*>(parent.internalPointer());

    if (row < parentItem->columnCount()){


        return QModelIndex();
    }
        else{


    TreeProp *childItem = parentItem->child(row - parentItem->columnCount());
    if (childItem)
        return createIndex(row, column, childItem);
    else
        return QModelIndex();
    }
}

QModelIndex TreeModel::parent(const QModelIndex &index) const
{
    if (!index.isValid())
        return QModelIndex();

    TreeProp *childItem = static_cast<TreeProp*>(index.internalPointer());
    TreeProp *parentItem = childItem->parentItem();

    if (parentItem == rootItem)
        return QModelIndex();

    return createIndex(parentItem->row(), 0, parentItem);
}

int TreeModel::rowCount(const QModelIndex &parent) const
{
    TreeProp *parentItem;
    if (parent.column() > 0)
        return 0;

    if (!parent.isValid())
        parentItem = rootItem;
    else
        parentItem = static_cast<TreeProp*>(parent.internalPointer());

    return parentItem->childCount() + parentItem->columnCount();
}


void TreeModel::setupModelData(const QStringList &lines, TreeProp *parent)
{
 //   QList<TreeProp*> parents;
 // QList<int> indentations;
 // parents << parent;
 // indentations << 0;

   QList<QVariant> columnData;

   columnData<< "p1" << "p2" << "p3";

   TreeProp* u1 = new TreeProp(columnData, parent);
   parent->appendChild(u1);

   columnData.clear();
   columnData<< "u1" << "u2" << "u3";
    TreeProp* u2 = new TreeProp(columnData, u1);
   u1->appendChild(u2);

   columnData.clear();
   columnData<< "s1" << "s2" << "s3";
    TreeProp* u3 = new TreeProp(columnData, u1);
  u1->appendChild(u3);

  columnData.clear();
  columnData<< "n1" << "n2" << "n3";
   TreeProp* u4 = new TreeProp(columnData, u2);
 u2->appendChild(u4);

   columnData.clear();
 columnData<< "t2" << "t2" << "t3";

 u1 = new TreeProp(columnData, parent);



 parent->appendChild(u1);

/*
   parents.last()->appendChild(new TreeProp(columnData, parents.last()));
   columnData.clear();
   columnData<< "m1" << "m2" << "m3";
   parents.last()->appendChild(new TreeProp(columnData, parents.last()));
*/
/*
      QList<TreeProp*> parents;
    QList<int> indentations;
    parents << parent;
    indentations << 0;

    int number = 0;

    while (number < lines.count()) {
        int position = 0;
        while (position < lines[number].length()) {
            if (lines[number].mid(position, 1) != " ")
                break;
            position++;
        }

        QString lineData = lines[number].mid(position).trimmed();

        if (!lineData.isEmpty()) {
            // Read the column data from the rest of the line.
            QStringList columnStrings = lineData.split("\t", QString::SkipEmptyParts);
            QList<QVariant> columnData;
            for (int column = 0; column < columnStrings.count(); ++column)
                columnData << columnStrings[column];

            if (position > indentations.last()) {
                // The last child of the current parent is now the new parent
                // unless the current parent has no children.

                if (parents.last()->childCount() > 0) {
                    parents << parents.last()->child(parents.last()->childCount()-1);
                    indentations << position;
                }
            } else {
                while (position < indentations.last() && parents.count() > 0) {
                    parents.pop_back();
                    indentations.pop_back();
                }
            }

            // Append a new item to the current parent's list of children.
            parents.last()->appendChild(new TreeProp(columnData, parents.last()));
        }

        ++number;
    }
   */

}
